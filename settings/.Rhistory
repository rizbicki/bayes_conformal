}
# Ridge
lambda_path(xTrain,yTrain)
# Ridge
l <- seq(0,max(lambda_path(xTrain,yTrain)),length.out=1000)
l
fitted_ridge <- cv.glmnet(x=xTrain,y=yTrain,alpha = 0,lambda = l)
coefficients(fitted_ridge)
plot(fitted_ridge)
fitted_ridge <- cv.glmnet(x=xTrain,y=yTrain,alpha = 0,lambda = l^2)
plot(fitted_ridge)
# Ridge
l <- seq(0,max(lambda_path(xTrain,yTrain)),length.out=10000)
fitted_ridge <- cv.glmnet(x=xTrain,y=yTrain,alpha = 0,lambda = l^2)
# Ridge
l <- seq(0,max(lambda_path(xTrain,yTrain))^2,length.out=10000)
fitted_ridge <- cv.glmnet(x=xTrain,y=yTrain,alpha = 0,lambda = l)
# Ridge
l <- seq(0,max(lambda_path(xTrain,yTrain))^2,length.out=5000)
fitted_ridge <- cv.glmnet(x=xTrain,y=yTrain,alpha = 0,lambda = l)
coefficients(fitted_ridge)
# LM Conformal
fitted_lm <- glmnet(x=xTrain,y=yTrain,alpha = 0,lambda = 0)
coefficients(fitted_lm)
# Bayes
fitted_bayes <- bayesian_regression(xTrain,yTrain,xVal,yVal)
coefficients(fitted_bayes)
fitted_bayes$mu_star
fitted_bayes$a_star/fitted_bayes$b_star
plot(g,dinvgamma(g,fitted_bayes2$a_star,fitted_bayes2$b_star))
g <- seq(0,10,0.01)
plot(g,dinvgamma(g,fitted_bayes2$a_star,fitted_bayes2$b_star))
plot(g,dinvgamma(g,fitted_bayes$a_star,fitted_bayes$b_star))
g <- seq(0,5,0.01)
plot(g,dinvgamma(g,fitted_bayes$a_star,fitted_bayes$b_star))
fitted_bayes2 <- bayesian_regression(xTrain,yTrain,xVal,yVal,a_grid = 0.1,b_grid=1)
plot(g,dinvgamma(g,fitted_bayes2$a_star,fitted_bayes2$b_star))
library(rsample)
cv <- vfold_cv(xTrain, v = 10)
cv$splits
?vfold_cv
cv$id
cv$id[1]
cv$splits[1]
cv$splits[[1]]
cv$splits
cv$splits[[1]]
cv$splits[[1]][[1]]
cv$splits[[1]]$id
cv$splits[[1]]$in_id
yTrain[cv$splits[[1]]$in_id]
gg=1
fit <- fit_bayes(xTrain[cv$splits[[1]]$in_id,],yTrain[cv$splits[[1]]$in_id],a_0,b_0,gamma_0[gg])
gamma_0_grid=seq(0.1,100,length.out=20)
fit <- fit_bayes(xTrain[cv$splits[[1]]$in_id,],yTrain[cv$splits[[1]]$in_id],a_0,b_0,gamma_0[gg])
fit <- fit_bayes(xTrain[cv$splits[[1]]$in_id,],yTrain[cv$splits[[1]]$in_id],a_0,b_0,gamma_0_grid[gg])
a_0=0.00001
b_0=1
fit <- fit_bayes(xTrain[cv$splits[[1]]$in_id,],yTrain[cv$splits[[1]]$in_id],a_0,b_0,gamma_0_grid[gg])
length(cv$splits[[1]]$in_id)
dim(xTrain)
prediction_calibration <- predict(fit,xTrain[-cv$splits[[1]]$in_id,])
prediction_calibration
nFolders=10
predictions <- rep(NA,length(yTrain))
folder=1
fit <- fit_bayes(xTrain[cv$splits[[1]]$in_id,],yTrain[cv$splits[[1]]$in_id],a_0,b_0,gamma_0_grid[gg])
predictions[-cv$splits[[1]]$in_id] <- predict(fit,xTrain[-cv$splits[[1]]$in_id,])
for(folder in 1:nFolders)
{
fit <- fit_bayes(xTrain[cv$splits[[1]]$in_id,],yTrain[cv$splits[[1]]$in_id],a_0,b_0,gamma_0_grid[gg])
predictions[-cv$splits[[1]]$in_id] <- predict(fit,xTrain[-cv$splits[[1]]$in_id,])
}
predictions
predictions <- rep(NA,length(yTrain))
predict(fit,xTrain[-cv$splits[[1]]$in_id,])
predictions[-cv$splits[[1]]$in_id]
length(predictions[-cv$splits[[1]]$in_id])
length( predict(fit,xTrain[-cv$splits[[1]]$in_id,]))
a= predict(fit,xTrain[-cv$splits[[1]]$in_id,])
predictions <- rep(NA,length(yTrain))
for(folder in 1:nFolders)
{
fit <- fit_bayes(xTrain[cv$splits[[1]]$in_id,],yTrain[cv$splits[[1]]$in_id],a_0,b_0,gamma_0_grid[gg])
predictions[-cv$splits[[1]]$in_id] <- predict(fit,xTrain[-cv$splits[[1]]$in_id,])$pred
}
predictions
length(predict(fit,xTrain[-cv$splits[[1]]$in_id,])$pred)
gamma_0_grid=seq(0.1,100,length.out=20)
mse <- rep(NA,length(gamma_0_grid))
cv <- vfold_cv(xTrain, v = nFolders)
predictions <- rep(NA,length(yTrain))
for(folder in 1:nFolders)
{
fit <- fit_bayes(xTrain[cv$splits[[folder]]$in_id,],yTrain[cv$splits[[folder]]$in_id],a_0,b_0,gamma_0_grid[gg])
predictions[-cv$splits[[folder]]$in_id] <- predict(fit,xTrain[-cv$splits[[folder]]$in_id,])$pred
}
predictions
gamma_0 <- gamma_0_grid[which.min(mse)[1],]
gamma_0 <- gamma_0_grid[which.min(mse)[1]]
gamma_0
for(gg in 1:length(mse))
{
for(folder in 1:nFolders)
{
fit <- fit_bayes(xTrain[cv$splits[[folder]]$in_id,],yTrain[cv$splits[[folder]]$in_id],a_0,b_0,gamma_0_grid[gg])
predictions[-cv$splits[[folder]]$in_id] <- predict(fit,xTrain[-cv$splits[[folder]]$in_id,])$pred
}
mse[gg] <- mean((predictions-yTrain)^2)
}
gamma_0 <- gamma_0_grid[which.min(mse)[1]]
gamma_0
plot(mse)
gamma_0_grid=seq(0.001,100,length.out=100)
mse <- rep(NA,length(gamma_0_grid))
cv <- vfold_cv(xTrain, v = nFolders)
predictions <- rep(NA,length(yTrain))
for(gg in 1:length(mse))
{
for(folder in 1:nFolders)
{
fit <- fit_bayes(xTrain[cv$splits[[folder]]$in_id,],yTrain[cv$splits[[folder]]$in_id],a_0,b_0,gamma_0_grid[gg])
predictions[-cv$splits[[folder]]$in_id] <- predict(fit,xTrain[-cv$splits[[folder]]$in_id,])$pred
}
mse[gg] <- mean((predictions-yTrain)^2)
}
gamma_0 <- gamma_0_grid[which.min(mse)[1]]
gamma_0
bayesian_regression_cv <- function(xTrain,yTrain,xCal,yCal,
a_0=0.00001,
b_0=1,nFolders=10)
{
gamma_0_grid=seq(0.001,100,length.out=100)
mse <- rep(NA,length(gamma_0_grid))
cv <- vfold_cv(xTrain, v = nFolders)
predictions <- rep(NA,length(yTrain))
for(gg in 1:length(mse))
{
for(folder in 1:nFolders)
{
fit <- fit_bayes(xTrain[cv$splits[[folder]]$in_id,],yTrain[cv$splits[[folder]]$in_id],a_0,b_0,gamma_0_grid[gg])
predictions[-cv$splits[[folder]]$in_id] <- predict(fit,xTrain[-cv$splits[[folder]]$in_id,])$pred
}
mse[gg] <- mean((predictions-yTrain)^2)
}
gamma_0 <- gamma_0_grid[which.min(mse)[1]]
fit <- fit_bayes(xTrain,yTrain,a_0,b_0,gamma_0)
output <- list(a_star=fit$a_star,
Gamma_star=fit$Gamma_star,
mu_star=fit$mu_star,
b_star=fit$b_star,
reescale_factor=fit$reescale_factor,
a_0=a_0,
b_0=b_0,
gamma_0=gamma_0,
mse=mse)
class(output) <- "fitbayes"
return(output)
}
rm(list=ls())
source("libraries.R")
source("distributions.R")
source("methods.R")
B <- 100 # number of repetitions of the experiment
n <- 1000 # train+validation
d <- 500
n_test <- 5000 # test
simulator=generate_hom_gaussian_2
n_methods <- 5
results <- data.frame(matrix(NA,nrow = B*n_methods,ncol=8))
print(ii/B)
data_test <- simulator(n_test,d)
data <- simulator(n,d)
ids <- sample(c("train","val"),size = n,prob = c(0.7,0.3),replace = TRUE)
xTrain <- data$x[ids=="train",]
yTrain <- data$y[ids=="train"]
xVal <- data$x[ids=="val",]
yVal <- data$y[ids=="val"]
# Ridge
l <- seq(0,max(lambda_path(xTrain,yTrain))^2,length.out=5000)
fitted_ridge <- cv.glmnet(x=xTrain,y=yTrain,alpha = 0,lambda = l)
fitted_ridge_conformal <- conformal(fitted_ridge,xVal,yVal)
pred_ridge_conformal <- predict(fitted_ridge_conformal,
data_test$x)
# LM Conformal
fitted_lm <- glmnet(x=xTrain,y=yTrain,alpha = 0,lambda = 0)
fitted_lm_conformal <- conformal(fitted_lm,xVal,yVal)
pred_lm_conformal <- predict(fitted_lm_conformal,
data_test$x)
# LM Exact predictive
data <- data.frame(y=yTrain,x=xTrain)
fitted_lm_exact <- lm(y~.,data = data)
data_full_test <- data.frame(y=data_test$y,x=data_test$x)
pred_lm_exact <- predict(fitted_lm_exact,data_full_test,
interval = "prediction",level=0.9) %>%
as.data.frame()
colnames(pred_lm_exact) <- c("pred","lower","upper")
# Bayes
fitted_bayes <- bayesian_regression_cv(xTrain,yTrain)
data_train_and_val <- simulator(n,d)
# LM Exact predictive
data <- data.frame(y=data_train_and_val$y,x=data_train_and_val$x)
fitted_lm_exact <- lm(y~.,data = data)
pred_bayes <- predict(fitted_bayes,data_test$x)
pred_bayes
rm(list=ls())
source("libraries.R")
source("distributions.R")
source("methods.R")
B <- 100 # number of repetitions of the experiment
n <- 1000 # train+validation
d <- 500
n_test <- 5000 # test
simulator=generate_hom_gaussian_2
n_methods <- 5
results <- data.frame(matrix(NA,nrow = B*n_methods,ncol=8))
print(ii/B)
data_test <- simulator(n_test,d)
data_train_and_val <- simulator(n,d)
ids <- sample(c("train","val"),size = n,prob = c(0.7,0.3),replace = TRUE)
xTrain <- data_train_and_val$x[ids=="train",]
yTrain <- data_train_and_val$y[ids=="train"]
xVal <- data_train_and_val$x[ids=="val",]
yVal <- data_train_and_val$y[ids=="val"]
# Ridge
l <- seq(0,max(lambda_path(xTrain,yTrain))^2,length.out=5000)
fitted_ridge <- cv.glmnet(x=xTrain,y=yTrain,alpha = 0,lambda = l)
fitted_ridge_conformal <- conformal(fitted_ridge,xVal,yVal)
pred_ridge_conformal <- predict(fitted_ridge_conformal,
data_test$x)
# LM Conformal
fitted_lm <- glmnet(x=xTrain,y=yTrain,alpha = 0,lambda = 0)
fitted_lm_conformal <- conformal(fitted_lm,xVal,yVal)
pred_lm_conformal <- predict(fitted_lm_conformal,
data_test$x)
# LM Exact predictive
data <- data.frame(y=data_train_and_val$y,x=data_train_and_val$x)
fitted_lm_exact <- lm(y~.,data = data)
data_full_test <- data.frame(y=data_test$y,x=data_test$x)
pred_lm_exact <- predict(fitted_lm_exact,data_full_test,
interval = "prediction",level=0.9) %>%
as.data.frame()
colnames(pred_lm_exact) <- c("pred","lower","upper")
# Bayes
fitted_bayes <- bayesian_regression_cv(data_train_and_val$x,data_train_and_val$y)
pred_bayes <- predict(fitted_bayes,data_test$x)
fitted_bayes_conformal <- bayesian_regression_cv(xTrain,yTrain)
fitted_bayes_conformal <- conformal(fitted_bayes_conformal,xVal,yVal)
pred_bayes_conformal <- predict(fitted_bayes_conformal,data_test$x)
results[n_methods*(ii-1)+1,] <- cbind(it=ii,method="Ridge (conformal)",
evaluate(pred_ridge_conformal,data_test$y))
evaluate(pred_ridge_conformal,data_test$y)
evaluate(pred_bayes,data_test$y)
evaluate(pred_bayes_conformal,data_test$y)
rm(list=ls())
gc()
source("libraries.R")
source("distributions.R")
source("methods.R")
B <- 100 # number of repetitions of the experiment
n <- 1000 # train+validation
d <- 50
n_test <- 5000 # test
simulator=generate_hom_gaussian_1
conformal <- function(fit,xCal,yCal,alpha=0.1)
{
predictions <- predict(fit,xCal)
if("pred"%in%names(predictions))
{
predictions=predictions$pred
}
residuals <- abs(predictions-yCal)
output <- list(cutoff=quantile(residuals,probs = 1-alpha),fit=fit)
class(output) <- "conformal"
return(output)
}
predict.conformal <- function(fit,xNew)
{
pred <- predict(fit$fit,xNew)
if("pred"%in%names(pred))
{
pred=pred$pred
}
lower <- pred-fit$cutoff
upper <- pred+fit$cutoff
return(list(pred=pred,
lower=lower,
upper=upper)
)
}
lambda_path <- function(x,y)
{
mysd <- function(z) sqrt(sum((z-mean(z))^2)/length(z))
sx <- scale(x, scale = apply(x, 2, mysd))
sx <- as.matrix(sx, ncol = 20, nrow = 100)
## Calculate lambda path (first get lambda_max):
lambda_max <- max(abs(colSums(sx*y)))/n
epsilon <- .0001
K <- 100
lambdapath <- round(exp(seq(log(lambda_max), log(lambda_max*epsilon),
length.out = K)), digits = 10)
return(lambdapath)
}
fit_bayes <- function(xTrain,yTrain,a,b,gamma_0)
{
mu_0 <- rep(0,ncol(xTrain))
reescale_factor <- mean(yTrain)
yTrain <- yTrain-reescale_factor
Gamma_0 <- diag(gamma_0,ncol(xTrain))
a_star <- a+nrow(xTrain)/2
Gamma_star <- t(xTrain)%*%xTrain+Gamma_0
mu_star <- solve(Gamma_star)%*%(Gamma_0%*%mu_0+t(xTrain)%*%yTrain)
b_star <- b+(t(yTrain)%*%yTrain + t(mu_0)%*% Gamma_0%*%mu_0- t(mu_star)%*%Gamma_star%*%mu_star )/2
output <- list(a_star=a_star,
Gamma_star=Gamma_star,
mu_star=mu_star,
b_star=b_star,
reescale_factor=reescale_factor)
class(output) <- "fitbayes"
return(output)
}
bayesian_regression <- function(xTrain,yTrain,xCal,yCal,
a_grid=seq(0.00001,5,length.out=20),
b_grid=seq(0.00001,5,length.out=20),
gamma_0_grid=seq(0.1,100,length.out=20))
{
grid <- expand.grid(a=a_grid,b=b_grid,gamma_0=gamma_0_grid)
mse <- rep(NA,nrow(grid))
for(gg in 1:nrow(grid))
{
fit <- fit_bayes(xTrain,yTrain,grid$a[gg],grid$b[gg],grid$gamma_0[gg])
prediction_calibration <- predict(fit,xCal)
mse[gg] <- mean((prediction_calibration$pred-yCal)^2)
}
best_par <- grid[which.min(mse)[1],]
fit <- fit_bayes(xTrain,yTrain,best_par$a,best_par$b,best_par$gamma_0)
output <- list(a_star=fit$a_star,
Gamma_star=fit$Gamma_star,
mu_star=fit$mu_star,
b_star=fit$b_star,
reescale_factor=fit$reescale_factor,
a_0=best_par$a,
b_0=best_par$b,
gamma_0=best_par$gamma_0,
mse=mse)
class(output) <- "fitbayes"
return(output)
}
bayesian_regression_cv <- function(xTrain,yTrain,xCal,yCal,
a_0=0.00001,
b_0=1,nFolders=10,gamma_0_grid=seq(0.001,100,length.out=100))
{
mse <- rep(NA,length(gamma_0_grid))
cv <- vfold_cv(xTrain, v = nFolders)
predictions <- rep(NA,length(yTrain))
for(gg in 1:length(mse))
{
for(folder in 1:nFolders)
{
fit <- fit_bayes(xTrain[cv$splits[[folder]]$in_id,],yTrain[cv$splits[[folder]]$in_id],a_0,b_0,gamma_0_grid[gg])
predictions[-cv$splits[[folder]]$in_id] <- predict(fit,xTrain[-cv$splits[[folder]]$in_id,])$pred
}
mse[gg] <- mean((predictions-yTrain)^2)
}
gamma_0 <- gamma_0_grid[which.min(mse)[1]]
fit <- fit_bayes(xTrain,yTrain,a_0,b_0,gamma_0)
output <- list(a_star=fit$a_star,
Gamma_star=fit$Gamma_star,
mu_star=fit$mu_star,
b_star=fit$b_star,
reescale_factor=fit$reescale_factor,
a_0=a_0,
b_0=b_0,
gamma_0=gamma_0,
mse=mse)
class(output) <- "fitbayes"
return(output)
}
predict.fitbayes <- function(fit,xNew,alpha=0.1)
{
pred=fit$reescale_factor+xNew%*%fit$mu_star
cov=as.numeric(fit$b_star/fit$a_star)*
(diag(1,nrow(xNew))+xNew%*%solve(fit$Gamma_star)%*%t(xNew))
lower <- qlst(alpha/2, df=2*fit$a_star,
mu = as.numeric(pred),
sigma = sqrt(diag(cov)))
upper <- qlst(1-alpha/2, df=2*fit$a_star,
mu = as.numeric(pred),
sigma = sqrt(diag(cov)))
return(list(pred=pred,
cov=cov,
lower=lower,
upper=upper)
)
}
evaluate <- function(pred,yTest)
{
mse <- mean((pred$pred-yTest)^2)
mse_se <- sd((pred$pred-yTest)^2)/sqrt(length(pred$upper))
size <- mean(pred$upper-pred$lower)
size_se <- sd(pred$upper-pred$lower)/sqrt(length(pred$upper))
coverage <- mean((pred$lower <= yTest)&(yTest <= pred$upper))
coverage_se <- sd((pred$lower <= yTest)&(yTest <= pred$upper))/sqrt(length(pred$upper))
return(data.frame(mse=mse,mse_se=mse_se,
size=size,size_se=size_se,
coverage=coverage,coverage_se=coverage_se))
}
results_tidy <- function(results)
{
results <- results[complete.cases(results),]
colnames(results) <- c("it","method",
"mse","mse_se",
"size","size_se",
"coverage","coverage_se")
results <-  results %>%
rename(MSE = mse,Coverage=coverage,Size=size)
results_tidy <- results %>%
pivot_longer(
cols = c("MSE","Size","Coverage"),
names_to = "measurement",
values_to = "value"
)
results_tidy$measurement <- factor(results_tidy$measurement,
levels = c("Coverage","Size","MSE"))
return(results_tidy)
}
create_plot <- function(results)
{
results <- results_tidy(results)
return(ggplot(results,aes(x=method, y=value)) +
stat_summary(fun.data=function(x){mean_cl_normal(x, conf.int=.95)},
geom="errorbar",
width=0.03, colour="blue", alpha=0.7) +
stat_summary(fun.y=mean, geom="point", fill="blue", pch=21, size=3) +
facet_wrap(vars(measurement), scales = "free")+
theme_minimal(base_size = 16)+
xlab("Method")+ylab("Statistic")+
theme(axis.text.x = element_text(angle = 45, hjust=1),
panel.spacing = unit(2, "lines")))
}
source("libraries.R")
source("distributions.R")
source("methods.R")
results <- readRDS("simulations/gaussian1.RDS")
create_plot(results)
ggsave("figures/gaussian1.png",width = 10,height = 6,bg = "white")
results <- readRDS("simulations/gaussian2.RDS")
create_plot(results)
ggsave("figures/gaussian2.png",width = 10,height = 6,bg = "white")
results <- readRDS("simulations/gaussian3.RDS")
create_plot(results)
ggsave("figures/gaussian3.png",width = 10,height = 6,bg = "white")
results <- readRDS("simulations/gaussian4.RDS")
create_plot(results)
ggsave("figures/gaussian4.png",width = 10,height = 6,bg = "white")
results <- readRDS("simulations/gaussian5.RDS")
source("libraries.R")
source("distributions.R")
source("methods.R")
results <- readRDS("simulations/gaussian1.RDS")
create_plot(results)
ggsave("figures/gaussian1.png",width = 10,height = 6,bg = "white")
results <- readRDS("simulations/gaussian2.RDS")
create_plot(results)
ggsave("figures/gaussian2.png",width = 10,height = 6,bg = "white")
results <- readRDS("simulations/gaussian3.RDS")
create_plot(results)
ggsave("figures/gaussian3.png",width = 10,height = 6,bg = "white")
results <- readRDS("simulations/gaussian4.RDS")
create_plot(results)
ggsave("figures/gaussian4.png",width = 10,height = 6,bg = "white")
results <- readRDS("simulations/gaussian5.RDS")
source("libraries.R")
source("distributions.R")
source("methods.R")
B <- 100 # number of repetitions of the experiment
n <- 1000 # train+validation
d <- 50
n_test <- 5000 # test
simulator=generate_hom_gaussian_2()
source("libraries.R")
source("distributions.R")
source("methods.R")
results <- readRDS("simulations/gaussian1.RDS")
create_plot(results)
ggsave("figures/gaussian1.png",width = 10,height = 6,bg = "white")
results <- readRDS("simulations/gaussian2.RDS")
create_plot(results)
ggsave("figures/gaussian2.png",width = 10,height = 6,bg = "white")
results <- readRDS("simulations/gaussian3.RDS")
create_plot(results)
ggsave("figures/gaussian3.png",width = 10,height = 6,bg = "white")
results <- readRDS("simulations/gaussian4.RDS")
create_plot(results)
ggsave("figures/gaussian4.png",width = 10,height = 6,bg = "white")
results <- readRDS("simulations/gaussian5.RDS")
create_plot(results)
ggsave("figures/gaussian5.png",width = 10,height = 6,bg = "white")
results <- readRDS("simulations/het.RDS")
create_plot(results)
ggsave("figures/het.png",width = 10,height = 6,bg = "white")
results <- readRDS("simulations/het2.RDS")
create_plot(results)
ggsave("figures/het2.png",width = 10,height = 6,bg = "white")
run_simulation(generate_hom_gaussian,"simulations/gaussian1.RDS", n=1000,d=500,n_test=5000,B=100)
source("run_simulation.R")
run_simulation(generate_hom_gaussian,"simulations/gaussian1.RDS", n=1000,d=500,n_test=5000,B=100)
setwd("/media/rizbicki/Dropbox/Izbicki/Classes/UQ_book/code/simulations/settings")
Rfiles <- dir(".", pattern="\\.[R|r]$", full.names=TRUE)
library(parallel)
clus <- makeCluster(length(Rfiles))
parLapply(clus, Rfiles, source)
