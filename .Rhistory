group_by(method,residual_type) %>%
summarise(coverage=mean(lower<y & upper>y))
# Add the combined_df object to the list
summary_dfs[[paste0("iteration_", seed)]] <- summary
}
library(ggplot2)
library(dplyr)
# Define the number of iterations and seeds
set.seed(0)
num_iterations <- 10000
seeds <- sample(1:num_iterations, num_iterations, replace = FALSE)
# List to store combined_df objects from each iteration
summary_dfs <- list()
theme_set(theme_bw(base_size = 32))
theme_update(panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey54"),
panel.border = element_blank(),
panel.grid.major.x = element_line(color = "gray61",
size = 0.25,
linetype = 4),
panel.grid.major.y = element_line(color = "gray61",
size = 0.25,
linetype = 4))
conformal <- function(fit,xCal,yCal,alpha=0.1) {
predictions <- predict(fit, xCal %>% as.data.frame())
residuals <- abs(predictions - (yCal %>% as.matrix()))
output <- list(cutoff = quantile(residuals, probs = 1-alpha,type = 1), fit = fit)
class(output) <- "conformal"
return(output)
}
predict.conformal <- function(fit, xNew) {
pred <- predict(fit$fit, xNew)
if ("pred" %in% names(pred)) {
pred = pred$pred
}
lower <- pred - fit$cutoff
upper <- pred + fit$cutoff
return(list(pred = pred, lower = lower, upper = upper))
}
# Function to generate data for a specific residual type
generate_data <- function(n, d, residual_type = "gaussian") {
if (residual_type == "gaussian") {
y <- 1 + 2 * x[, 1] + rnorm(n, sd = 0.3)
} else if (residual_type == "t") {
y <- 1 + 2 * x[, 1] + rt(n, df = 2) * abs(x[, 1])/2
} else if (residual_type == "t_5") {
y <- 1 + 2 * x[, 1]^2+sin(x[,2]) + rt(n, df = 2) * abs(x[, 1])/2
}
return(data.frame(x = x, y = y))
}
# Loop through different seeds and generate datasets
for (seed in seeds) {
set.seed(seed)
n <- 300
ncal <- 100
d <- 150
# Gaussian residuals data
x <- matrix(rnorm(n*d), n, d)
data_gaussian <- generate_data(n, d, residual_type = "gaussian")
# t residuals data with df=2
x <- matrix(rnorm(n*d), n, d)
data_t <- generate_data(n, d, residual_type = "t")
# t residuals data with df=5
x <- matrix(rnorm(n*d), n, d)
data_t_5 <- generate_data(n, d, residual_type = "t_5")
# Additional calibration
x <- matrix(rnorm(n*d), n, d)
data_additional_calibration_gaussian <- generate_data(n, d, residual_type = "gaussian")
data_additional_calibration_t <- generate_data(n, d, residual_type = "t")
data_additional_calibration_t_5 <- generate_data(n, d, residual_type = "t_5")
# Test data
n_test <- 1
x <- matrix(rnorm(n_test*d), n_test, d)
data_test_gaussian <- generate_data(n_test, d, residual_type = "gaussian")
data_test_t <- generate_data(n_test, d, residual_type = "t")
data_test_t_5 <- generate_data(n_test, d, residual_type = "t_5")
# Split the data into training and calibration sets
train_indices <- sample(seq_len(n), size = n - ncal)
train_data_gaussian <- data_gaussian[train_indices, ]
calibration_data1_gaussian <- data_gaussian[-train_indices, ]
calibration_data2_gaussian <- rbind(calibration_data1_gaussian, data_additional_calibration_gaussian)
train_data_t <- data_t[train_indices, ]
calibration_data1_t <- data_t[-train_indices, ]
calibration_data2_t <- rbind(calibration_data1_t, data_additional_calibration_t)
train_data_t_5 <- data_t_5[train_indices, ]
calibration_data1_t_5 <- data_t_5[-train_indices, ]
calibration_data2_t_5 <- rbind(calibration_data1_t_5, data_additional_calibration_t_5)
# Linear model and predictions for all cases
fit_gaussian <- lm(y ~ ., data = train_data_gaussian)
fit_t <- lm(y ~ ., data = train_data_t)
fit_t_5 <- lm(y ~ ., data = train_data_t_5)
# Gaussian residual predictions
pred_lm_exact_gaussian <- predict(fit_gaussian, data_test_gaussian, interval = "prediction", level = 0.9) %>%
as.data.frame()
pred_lm_exact_gaussian$y <- data_test_gaussian$y
fitted_lm_conformal1_gaussian <- conformal(fit_gaussian, calibration_data1_gaussian %>% select(-y), calibration_data1_gaussian %>% select(y), alpha = 0.1)
pred_lm_conformal1_gaussian <- predict(fitted_lm_conformal1_gaussian, data_test_gaussian %>% select(-y)) %>% as.data.frame()
pred_lm_conformal1_gaussian$y <- data_test_gaussian$y
fitted_lm_conformal2_gaussian <- conformal(fit_gaussian, calibration_data2_gaussian %>% select(-y), calibration_data2_gaussian %>% select(y), alpha = 0.1)
pred_lm_conformal2_gaussian <- predict(fitted_lm_conformal2_gaussian, data_test_gaussian %>% select(-y)) %>% as.data.frame()
pred_lm_conformal2_gaussian$y <- data_test_gaussian$y
# t residual predictions
pred_lm_exact_t <- predict(fit_t, data_test_t, interval = "prediction", level = 0.9) %>%
as.data.frame()
pred_lm_exact_t$y <- data_test_t$y
fitted_lm_conformal1_t <- conformal(fit_t, calibration_data1_t %>% select(-y), calibration_data1_t %>% select(y), alpha = 0.1)
pred_lm_conformal1_t <- predict(fitted_lm_conformal1_t, data_test_t %>% select(-y)) %>% as.data.frame()
pred_lm_conformal1_t$y <- data_test_t$y
fitted_lm_conformal2_t <- conformal(fit_t, calibration_data2_t %>% select(-y), calibration_data2_t %>% select(y), alpha = 0.1)
pred_lm_conformal2_t <- predict(fitted_lm_conformal2_t, data_test_t %>% select(-y)) %>% as.data.frame()
pred_lm_conformal2_t$y <- data_test_t$y
# t (df=5) residual predictions
pred_lm_exact_t_5 <- predict(fit_t_5, data_test_t_5, interval = "prediction", level = 0.9) %>%
as.data.frame()
pred_lm_exact_t_5$y <- data_test_t_5$y
fitted_lm_conformal1_t_5 <- conformal(fit_t_5, calibration_data1_t_5 %>% select(-y), calibration_data1_t_5 %>% select(y), alpha = 0.1)
pred_lm_conformal1_t_5 <- predict(fitted_lm_conformal1_t_5, data_test_t_5 %>% select(-y)) %>% as.data.frame()
pred_lm_conformal1_t_5$y <- data_test_t_5$y
fitted_lm_conformal2_t_5 <- conformal(fit_t_5, calibration_data2_t_5 %>% select(-y), calibration_data2_t_5 %>% select(y), alpha = 0.1)
pred_lm_conformal2_t_5 <- predict(fitted_lm_conformal2_t_5, data_test_t_5 %>% select(-y)) %>% as.data.frame()
pred_lm_conformal2_t_5$y <- data_test_t_5$y
# Combine predictions and add labels
pred_lm_exact_gaussian$residual_type <- "Gaussian residuals"
pred_lm_exact_gaussian$method <- "Linear Model"
pred_lm_conformal1_gaussian$residual_type <- "Gaussian residuals"
pred_lm_conformal1_gaussian$method <- "Conformal (calibration size = 100)"
pred_lm_conformal2_gaussian$residual_type <- "Gaussian residuals"
pred_lm_conformal2_gaussian$method <- "Conformal (calibration size = 1000)"
pred_lm_exact_t$residual_type <- "t residual (df=2)"
pred_lm_exact_t$method <- "Linear Model"
pred_lm_conformal1_t$residual_type <- "t residual (df=2)"
pred_lm_conformal1_t$method <- "Conformal (calibration size = 100)"
pred_lm_conformal2_t$residual_type <- "t residual (df=2)"
pred_lm_conformal2_t$method <- "Conformal (calibration size = 1000)"
pred_lm_exact_t_5$residual_type <- "t residual (df=5)"
pred_lm_exact_t_5$method <- "Linear Model"
pred_lm_conformal1_t_5$residual_type <- "t residual (df=5)"
pred_lm_conformal1_t_5$method <- "Conformal (calibration size = 100)"
pred_lm_conformal2_t_5$residual_type <- "t residual (df=5)"
pred_lm_conformal2_t_5$method <- "Conformal (calibration size = 1000)"
# Ensure the column names of all data frames are consistent
colnames(pred_lm_exact_gaussian) <- colnames(pred_lm_conformal1_gaussian) <- colnames(pred_lm_conformal2_gaussian) <-
c("fit", "lower", "upper", "y","residual_type","method")
colnames(pred_lm_exact_t) <- colnames(pred_lm_conformal1_t) <- colnames(pred_lm_conformal2_t) <-
c("fit", "lower", "upper", "y", "residual_type","method")
colnames(pred_lm_exact_t_5) <- colnames(pred_lm_conformal1_t_5) <- colnames(pred_lm_conformal2_t_5) <-
c("fit", "lower", "upper", "y", "residual_type","method")
# Combine the Gaussian, t (df=2), and t (df=5) residual data frames
combined_df_gaussian <- rbind(pred_lm_exact_gaussian, pred_lm_conformal1_gaussian, pred_lm_conformal2_gaussian)
combined_df_t <- rbind(pred_lm_exact_t, pred_lm_conformal1_t, pred_lm_conformal2_t)
combined_df_t_5 <- rbind(pred_lm_exact_t_5, pred_lm_conformal1_t_5, pred_lm_conformal2_t_5)
# Combine all data
combined_df <- rbind(combined_df_gaussian, combined_df_t, combined_df_t_5)
combined_df$method <- factor(combined_df$method,
levels = c("Linear Model",
"Conformal (calibration size = 1000)",
"Conformal (calibration size = 100)"))
summary <- combined_df %>%
group_by(method,residual_type) %>%
summarise(coverage=mean(lower<y & upper>y))
# Add the combined_df object to the list
summary_dfs[[paste0("iteration_", seed)]] <- summary
}
library(ggplot2)
library(dplyr)
# Define the number of iterations and seeds
set.seed(0)
num_iterations <- 500
seeds <- sample(1:num_iterations, num_iterations, replace = FALSE)
# List to store combined_df objects from each iteration
summary_dfs <- list()
theme_set(theme_bw(base_size = 32))
theme_update(panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey54"),
panel.border = element_blank(),
panel.grid.major.x = element_line(color = "gray61",
size = 0.25,
linetype = 4),
panel.grid.major.y = element_line(color = "gray61",
size = 0.25,
linetype = 4))
conformal <- function(fit,xCal,yCal,alpha=0.1) {
predictions <- predict(fit, xCal %>% as.data.frame())
residuals <- abs(predictions - (yCal %>% as.matrix()))
output <- list(cutoff = quantile(residuals, probs = 1-alpha,type = 1), fit = fit)
class(output) <- "conformal"
return(output)
}
predict.conformal <- function(fit, xNew) {
pred <- predict(fit$fit, xNew)
if ("pred" %in% names(pred)) {
pred = pred$pred
}
lower <- pred - fit$cutoff
upper <- pred + fit$cutoff
return(list(pred = pred, lower = lower, upper = upper))
}
# Function to generate data for a specific residual type
generate_data <- function(n, d, residual_type = "gaussian") {
if (residual_type == "gaussian") {
y <- 1 + 2 * x[, 1] + rnorm(n, sd = 0.3)
} else if (residual_type == "t") {
y <- 1 + 2 * x[, 1] + rt(n, df = 2) * abs(x[, 1])/2
} else if (residual_type == "t_5") {
y <- 1 + 2 * x[, 1]^2+sin(x[,2]) + rt(n, df = 2) * abs(x[, 1])/2
}
return(data.frame(x = x, y = y))
}
# Loop through different seeds and generate datasets
for (seed in seeds) {
set.seed(seed)
n <- 300
ncal <- 100
d <- 150
# Gaussian residuals data
x <- matrix(rnorm(n*d), n, d)
data_gaussian <- generate_data(n, d, residual_type = "gaussian")
# t residuals data with df=2
x <- matrix(rnorm(n*d), n, d)
data_t <- generate_data(n, d, residual_type = "t")
# t residuals data with df=5
x <- matrix(rnorm(n*d), n, d)
data_t_5 <- generate_data(n, d, residual_type = "t_5")
# Additional calibration
x <- matrix(rnorm(n*d), n, d)
data_additional_calibration_gaussian <- generate_data(n, d, residual_type = "gaussian")
data_additional_calibration_t <- generate_data(n, d, residual_type = "t")
data_additional_calibration_t_5 <- generate_data(n, d, residual_type = "t_5")
# Test data
n_test <- 1
x <- matrix(rnorm(n_test*d), n_test, d)
data_test_gaussian <- generate_data(n_test, d, residual_type = "gaussian")
data_test_t <- generate_data(n_test, d, residual_type = "t")
data_test_t_5 <- generate_data(n_test, d, residual_type = "t_5")
# Split the data into training and calibration sets
train_indices <- sample(seq_len(n), size = n - ncal)
train_data_gaussian <- data_gaussian[train_indices, ]
calibration_data1_gaussian <- data_gaussian[-train_indices, ]
calibration_data2_gaussian <- rbind(calibration_data1_gaussian, data_additional_calibration_gaussian)
train_data_t <- data_t[train_indices, ]
calibration_data1_t <- data_t[-train_indices, ]
calibration_data2_t <- rbind(calibration_data1_t, data_additional_calibration_t)
train_data_t_5 <- data_t_5[train_indices, ]
calibration_data1_t_5 <- data_t_5[-train_indices, ]
calibration_data2_t_5 <- rbind(calibration_data1_t_5, data_additional_calibration_t_5)
# Linear model and predictions for all cases
fit_gaussian <- lm(y ~ ., data = train_data_gaussian)
fit_t <- lm(y ~ ., data = train_data_t)
fit_t_5 <- lm(y ~ ., data = train_data_t_5)
# Gaussian residual predictions
pred_lm_exact_gaussian <- predict(fit_gaussian, data_test_gaussian, interval = "prediction", level = 0.9) %>%
as.data.frame()
pred_lm_exact_gaussian$y <- data_test_gaussian$y
fitted_lm_conformal1_gaussian <- conformal(fit_gaussian, calibration_data1_gaussian %>% select(-y), calibration_data1_gaussian %>% select(y), alpha = 0.1)
pred_lm_conformal1_gaussian <- predict(fitted_lm_conformal1_gaussian, data_test_gaussian %>% select(-y)) %>% as.data.frame()
pred_lm_conformal1_gaussian$y <- data_test_gaussian$y
fitted_lm_conformal2_gaussian <- conformal(fit_gaussian, calibration_data2_gaussian %>% select(-y), calibration_data2_gaussian %>% select(y), alpha = 0.1)
pred_lm_conformal2_gaussian <- predict(fitted_lm_conformal2_gaussian, data_test_gaussian %>% select(-y)) %>% as.data.frame()
pred_lm_conformal2_gaussian$y <- data_test_gaussian$y
# t residual predictions
pred_lm_exact_t <- predict(fit_t, data_test_t, interval = "prediction", level = 0.9) %>%
as.data.frame()
pred_lm_exact_t$y <- data_test_t$y
fitted_lm_conformal1_t <- conformal(fit_t, calibration_data1_t %>% select(-y), calibration_data1_t %>% select(y), alpha = 0.1)
pred_lm_conformal1_t <- predict(fitted_lm_conformal1_t, data_test_t %>% select(-y)) %>% as.data.frame()
pred_lm_conformal1_t$y <- data_test_t$y
fitted_lm_conformal2_t <- conformal(fit_t, calibration_data2_t %>% select(-y), calibration_data2_t %>% select(y), alpha = 0.1)
pred_lm_conformal2_t <- predict(fitted_lm_conformal2_t, data_test_t %>% select(-y)) %>% as.data.frame()
pred_lm_conformal2_t$y <- data_test_t$y
# t (df=5) residual predictions
pred_lm_exact_t_5 <- predict(fit_t_5, data_test_t_5, interval = "prediction", level = 0.9) %>%
as.data.frame()
pred_lm_exact_t_5$y <- data_test_t_5$y
fitted_lm_conformal1_t_5 <- conformal(fit_t_5, calibration_data1_t_5 %>% select(-y), calibration_data1_t_5 %>% select(y), alpha = 0.1)
pred_lm_conformal1_t_5 <- predict(fitted_lm_conformal1_t_5, data_test_t_5 %>% select(-y)) %>% as.data.frame()
pred_lm_conformal1_t_5$y <- data_test_t_5$y
fitted_lm_conformal2_t_5 <- conformal(fit_t_5, calibration_data2_t_5 %>% select(-y), calibration_data2_t_5 %>% select(y), alpha = 0.1)
pred_lm_conformal2_t_5 <- predict(fitted_lm_conformal2_t_5, data_test_t_5 %>% select(-y)) %>% as.data.frame()
pred_lm_conformal2_t_5$y <- data_test_t_5$y
# Combine predictions and add labels
pred_lm_exact_gaussian$residual_type <- "Gaussian residuals"
pred_lm_exact_gaussian$method <- "Linear Model"
pred_lm_conformal1_gaussian$residual_type <- "Gaussian residuals"
pred_lm_conformal1_gaussian$method <- "Conformal (calibration size = 100)"
pred_lm_conformal2_gaussian$residual_type <- "Gaussian residuals"
pred_lm_conformal2_gaussian$method <- "Conformal (calibration size = 1000)"
pred_lm_exact_t$residual_type <- "t residual (df=2)"
pred_lm_exact_t$method <- "Linear Model"
pred_lm_conformal1_t$residual_type <- "t residual (df=2)"
pred_lm_conformal1_t$method <- "Conformal (calibration size = 100)"
pred_lm_conformal2_t$residual_type <- "t residual (df=2)"
pred_lm_conformal2_t$method <- "Conformal (calibration size = 1000)"
pred_lm_exact_t_5$residual_type <- "t residual (df=5)"
pred_lm_exact_t_5$method <- "Linear Model"
pred_lm_conformal1_t_5$residual_type <- "t residual (df=5)"
pred_lm_conformal1_t_5$method <- "Conformal (calibration size = 100)"
pred_lm_conformal2_t_5$residual_type <- "t residual (df=5)"
pred_lm_conformal2_t_5$method <- "Conformal (calibration size = 1000)"
# Ensure the column names of all data frames are consistent
colnames(pred_lm_exact_gaussian) <- colnames(pred_lm_conformal1_gaussian) <- colnames(pred_lm_conformal2_gaussian) <-
c("fit", "lower", "upper", "y","residual_type","method")
colnames(pred_lm_exact_t) <- colnames(pred_lm_conformal1_t) <- colnames(pred_lm_conformal2_t) <-
c("fit", "lower", "upper", "y", "residual_type","method")
colnames(pred_lm_exact_t_5) <- colnames(pred_lm_conformal1_t_5) <- colnames(pred_lm_conformal2_t_5) <-
c("fit", "lower", "upper", "y", "residual_type","method")
# Combine the Gaussian, t (df=2), and t (df=5) residual data frames
combined_df_gaussian <- rbind(pred_lm_exact_gaussian, pred_lm_conformal1_gaussian, pred_lm_conformal2_gaussian)
combined_df_t <- rbind(pred_lm_exact_t, pred_lm_conformal1_t, pred_lm_conformal2_t)
combined_df_t_5 <- rbind(pred_lm_exact_t_5, pred_lm_conformal1_t_5, pred_lm_conformal2_t_5)
# Combine all data
combined_df <- rbind(combined_df_gaussian, combined_df_t, combined_df_t_5)
combined_df$method <- factor(combined_df$method,
levels = c("Linear Model",
"Conformal (calibration size = 1000)",
"Conformal (calibration size = 100)"))
summary <- combined_df %>%
group_by(method,residual_type) %>%
summarise(coverage=mean(lower<y & upper>y))
# Add the combined_df object to the list
summary_dfs[[paste0("iteration_", seed)]] <- summary
}
combined_df <- bind_rows(summary_dfs, .id = "iteration")
df <- combined_df %>%
group_by(method,residual_type) %>%
summarise(coverage_mean=mean(coverage),coverage_se=sqrt(var(coverage)/length(seeds)))
ggplot(df, aes(x = method, y = coverage_mean, color = residual_type)) +
geom_point(position = position_dodge(width = 0.5), size = 3) +
geom_errorbar(aes(ymin = coverage_mean - 2*coverage_se, ymax = coverage_mean + 2*coverage_se),
position = position_dodge(0.5), width = 0.2) +
labs(x = "Method", y = "Coverage Mean", title = "Coverage Means with Standard Errors by Method and Residual Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
geom_hline(yintercept = 0.90, linetype = "dashed", color = "red")
plot(x[,2],sin(x[,2]))
x
plot(x[,2],sin(x[,2]))
x[,2]
# Gaussian residuals data
x <- matrix(rnorm(n*d), n, d)
plot(x[,2],sin(x[,2]))
plot(x[,2],sin(2*x[,2]))
plot(x[,2],sin(5*x[,2]))
library(ggplot2)
library(dplyr)
# Define the number of iterations and seeds
set.seed(0)
num_iterations <- 1000
seeds <- sample(1:num_iterations, num_iterations, replace = FALSE)
# List to store combined_df objects from each iteration
summary_dfs <- list()
theme_set(theme_bw(base_size = 32))
theme_update(panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey54"),
panel.border = element_blank(),
panel.grid.major.x = element_line(color = "gray61",
size = 0.25,
linetype = 4),
panel.grid.major.y = element_line(color = "gray61",
size = 0.25,
linetype = 4))
conformal <- function(fit,xCal,yCal,alpha=0.1) {
predictions <- predict(fit, xCal %>% as.data.frame())
residuals <- abs(predictions - (yCal %>% as.matrix()))
output <- list(cutoff = quantile(residuals, probs = 1-alpha,type = 1), fit = fit)
class(output) <- "conformal"
return(output)
}
predict.conformal <- function(fit, xNew) {
pred <- predict(fit$fit, xNew)
if ("pred" %in% names(pred)) {
pred = pred$pred
}
lower <- pred - fit$cutoff
upper <- pred + fit$cutoff
return(list(pred = pred, lower = lower, upper = upper))
}
# Function to generate data for a specific residual type
generate_data <- function(n, d, residual_type = "gaussian") {
if (residual_type == "gaussian") {
y <- 2 * x[, 1] + rnorm(n, sd = 0.3)
} else if (residual_type == "t") {
y <- 2 * x[, 1] + rt(n, df = 2) * abs(x[, 1])/2
} else if (residual_type == "t_5") {
y <- sin(5*x[,2]) + rt(n, df = 2) * abs(x[, 1])/2
}
return(data.frame(x = x, y = y))
}
# Loop through different seeds and generate datasets
for (seed in seeds) {
set.seed(seed)
n <- 300
ncal <- 100
d <- 150
# Gaussian residuals data
x <- matrix(rnorm(n*d), n, d)
data_gaussian <- generate_data(n, d, residual_type = "gaussian")
# t residuals data with df=2
x <- matrix(rnorm(n*d), n, d)
data_t <- generate_data(n, d, residual_type = "t")
# t residuals data with df=5
x <- matrix(rnorm(n*d), n, d)
data_t_5 <- generate_data(n, d, residual_type = "t_5")
# Additional calibration
x <- matrix(rnorm(n*d), n, d)
data_additional_calibration_gaussian <- generate_data(n, d, residual_type = "gaussian")
data_additional_calibration_t <- generate_data(n, d, residual_type = "t")
data_additional_calibration_t_5 <- generate_data(n, d, residual_type = "t_5")
# Test data
n_test <- 1
x <- matrix(rnorm(n_test*d), n_test, d)
data_test_gaussian <- generate_data(n_test, d, residual_type = "gaussian")
data_test_t <- generate_data(n_test, d, residual_type = "t")
data_test_t_5 <- generate_data(n_test, d, residual_type = "t_5")
# Split the data into training and calibration sets
train_indices <- sample(seq_len(n), size = n - ncal)
train_data_gaussian <- data_gaussian[train_indices, ]
calibration_data1_gaussian <- data_gaussian[-train_indices, ]
calibration_data2_gaussian <- rbind(calibration_data1_gaussian, data_additional_calibration_gaussian)
train_data_t <- data_t[train_indices, ]
calibration_data1_t <- data_t[-train_indices, ]
calibration_data2_t <- rbind(calibration_data1_t, data_additional_calibration_t)
train_data_t_5 <- data_t_5[train_indices, ]
calibration_data1_t_5 <- data_t_5[-train_indices, ]
calibration_data2_t_5 <- rbind(calibration_data1_t_5, data_additional_calibration_t_5)
# Linear model and predictions for all cases
fit_gaussian <- lm(y ~ ., data = train_data_gaussian)
fit_t <- lm(y ~ ., data = train_data_t)
fit_t_5 <- lm(y ~ ., data = train_data_t_5)
# Gaussian residual predictions
pred_lm_exact_gaussian <- predict(fit_gaussian, data_test_gaussian, interval = "prediction", level = 0.9) %>%
as.data.frame()
pred_lm_exact_gaussian$y <- data_test_gaussian$y
fitted_lm_conformal1_gaussian <- conformal(fit_gaussian, calibration_data1_gaussian %>% select(-y), calibration_data1_gaussian %>% select(y), alpha = 0.1)
pred_lm_conformal1_gaussian <- predict(fitted_lm_conformal1_gaussian, data_test_gaussian %>% select(-y)) %>% as.data.frame()
pred_lm_conformal1_gaussian$y <- data_test_gaussian$y
fitted_lm_conformal2_gaussian <- conformal(fit_gaussian, calibration_data2_gaussian %>% select(-y), calibration_data2_gaussian %>% select(y), alpha = 0.1)
pred_lm_conformal2_gaussian <- predict(fitted_lm_conformal2_gaussian, data_test_gaussian %>% select(-y)) %>% as.data.frame()
pred_lm_conformal2_gaussian$y <- data_test_gaussian$y
# t residual predictions
pred_lm_exact_t <- predict(fit_t, data_test_t, interval = "prediction", level = 0.9) %>%
as.data.frame()
pred_lm_exact_t$y <- data_test_t$y
fitted_lm_conformal1_t <- conformal(fit_t, calibration_data1_t %>% select(-y), calibration_data1_t %>% select(y), alpha = 0.1)
pred_lm_conformal1_t <- predict(fitted_lm_conformal1_t, data_test_t %>% select(-y)) %>% as.data.frame()
pred_lm_conformal1_t$y <- data_test_t$y
fitted_lm_conformal2_t <- conformal(fit_t, calibration_data2_t %>% select(-y), calibration_data2_t %>% select(y), alpha = 0.1)
pred_lm_conformal2_t <- predict(fitted_lm_conformal2_t, data_test_t %>% select(-y)) %>% as.data.frame()
pred_lm_conformal2_t$y <- data_test_t$y
# t (df=5) residual predictions
pred_lm_exact_t_5 <- predict(fit_t_5, data_test_t_5, interval = "prediction", level = 0.9) %>%
as.data.frame()
pred_lm_exact_t_5$y <- data_test_t_5$y
fitted_lm_conformal1_t_5 <- conformal(fit_t_5, calibration_data1_t_5 %>% select(-y), calibration_data1_t_5 %>% select(y), alpha = 0.1)
pred_lm_conformal1_t_5 <- predict(fitted_lm_conformal1_t_5, data_test_t_5 %>% select(-y)) %>% as.data.frame()
pred_lm_conformal1_t_5$y <- data_test_t_5$y
fitted_lm_conformal2_t_5 <- conformal(fit_t_5, calibration_data2_t_5 %>% select(-y), calibration_data2_t_5 %>% select(y), alpha = 0.1)
pred_lm_conformal2_t_5 <- predict(fitted_lm_conformal2_t_5, data_test_t_5 %>% select(-y)) %>% as.data.frame()
pred_lm_conformal2_t_5$y <- data_test_t_5$y
# Combine predictions and add labels
pred_lm_exact_gaussian$residual_type <- "Gaussian residuals"
pred_lm_exact_gaussian$method <- "Linear Model"
pred_lm_conformal1_gaussian$residual_type <- "Gaussian residuals"
pred_lm_conformal1_gaussian$method <- "Conformal (calibration size = 100)"
pred_lm_conformal2_gaussian$residual_type <- "Gaussian residuals"
pred_lm_conformal2_gaussian$method <- "Conformal (calibration size = 1000)"
pred_lm_exact_t$residual_type <- "t residual (df=2)"
pred_lm_exact_t$method <- "Linear Model"
pred_lm_conformal1_t$residual_type <- "t residual (df=2)"
pred_lm_conformal1_t$method <- "Conformal (calibration size = 100)"
pred_lm_conformal2_t$residual_type <- "t residual (df=2)"
pred_lm_conformal2_t$method <- "Conformal (calibration size = 1000)"
pred_lm_exact_t_5$residual_type <- "t residual (df=5)"
pred_lm_exact_t_5$method <- "Linear Model"
pred_lm_conformal1_t_5$residual_type <- "t residual (df=5)"
pred_lm_conformal1_t_5$method <- "Conformal (calibration size = 100)"
pred_lm_conformal2_t_5$residual_type <- "t residual (df=5)"
pred_lm_conformal2_t_5$method <- "Conformal (calibration size = 1000)"
# Ensure the column names of all data frames are consistent
colnames(pred_lm_exact_gaussian) <- colnames(pred_lm_conformal1_gaussian) <- colnames(pred_lm_conformal2_gaussian) <-
c("fit", "lower", "upper", "y","residual_type","method")
colnames(pred_lm_exact_t) <- colnames(pred_lm_conformal1_t) <- colnames(pred_lm_conformal2_t) <-
c("fit", "lower", "upper", "y", "residual_type","method")
colnames(pred_lm_exact_t_5) <- colnames(pred_lm_conformal1_t_5) <- colnames(pred_lm_conformal2_t_5) <-
c("fit", "lower", "upper", "y", "residual_type","method")
# Combine the Gaussian, t (df=2), and t (df=5) residual data frames
combined_df_gaussian <- rbind(pred_lm_exact_gaussian, pred_lm_conformal1_gaussian, pred_lm_conformal2_gaussian)
combined_df_t <- rbind(pred_lm_exact_t, pred_lm_conformal1_t, pred_lm_conformal2_t)
combined_df_t_5 <- rbind(pred_lm_exact_t_5, pred_lm_conformal1_t_5, pred_lm_conformal2_t_5)
# Combine all data
combined_df <- rbind(combined_df_gaussian, combined_df_t, combined_df_t_5)
combined_df$method <- factor(combined_df$method,
levels = c("Linear Model",
"Conformal (calibration size = 1000)",
"Conformal (calibration size = 100)"))
summary <- combined_df %>%
group_by(method,residual_type) %>%
summarise(coverage=mean(lower<y & upper>y))
# Add the combined_df object to the list
summary_dfs[[paste0("iteration_", seed)]] <- summary
}
combined_df <- bind_rows(summary_dfs, .id = "iteration")
df <- combined_df %>%
group_by(method,residual_type) %>%
summarise(coverage_mean=mean(coverage),coverage_se=sqrt(var(coverage)/length(seeds)))
ggplot(df, aes(x = method, y = coverage_mean, color = residual_type)) +
geom_point(position = position_dodge(width = 0.5), size = 3) +
geom_errorbar(aes(ymin = coverage_mean - 2*coverage_se, ymax = coverage_mean + 2*coverage_se),
position = position_dodge(0.5), width = 0.2) +
labs(x = "Method", y = "Coverage Mean", title = "Coverage Means with Standard Errors by Method and Residual Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
geom_hline(yintercept = 0.90, linetype = "dashed", color = "red")
